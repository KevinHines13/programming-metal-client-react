{"version":3,"sources":["logo.svg","components/NavItem.js","components/NavComponent.js","components/HomePage.js","constants.js","components/PricingPage.js","components/PagesComponent.js","containers/WebsiteContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavItem","selected","title","history","route","className","concat","onClick","push","NavComponent","page","type","data-toggle","data-target","id","HomePage","window","open","disabled","PricingPage","PagesComponent","render","props","React","Component","WebsiteContainer","basename","process","path","exact","localStorage","getItem","console","log","split","removeItem","to","App","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mMAAAA,EAAOC,QAAU,IAA0B,kC,wKCO5BC,G,MALC,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAUC,EAAZ,EAAYA,MAAOC,EAAnB,EAAmBA,QAASC,EAA5B,EAA4BA,MAA5B,OACZ,wBAAIC,UAAW,qBAAqBC,OAAOL,EAAW,SAAU,KAC5D,uBAAGI,UAAU,WAAWE,QAAS,kBAAMJ,EAAQK,KAAKJ,KAASF,MC6BtDO,EA5BM,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAMP,EAAR,EAAQA,QAAR,OACjB,yBAAKE,UAAU,6DACX,yBAAKA,UAAU,yDACVE,QAAS,kBAAMJ,EAAQK,KAAK,WADjC,qBAKA,4BAAQH,UAAU,iBAAiBM,KAAK,SAASC,cAAY,WACrDC,cAAY,eAChB,0BAAMR,UAAU,yBAGpB,yBAAKA,UAAU,2BAA2BS,GAAG,cACzC,wBAAIT,UAAU,sBACV,kBAAC,EAAD,CAASJ,SAAmB,SAATS,EACVP,QAASA,EACTC,MAAM,QACNF,MAAM,SAEf,kBAAC,EAAD,CAASD,SAAmB,YAATS,EACVP,QAASA,EACTC,MAAM,WACNF,MAAM,gBCShBa,EAjCE,kBACb,yBAAKV,UAAU,aACX,wBAAIA,UAAU,QAAd,iCACA,iSAMA,6BACA,2CACA,sGAGA,4BAAQM,KAAK,SAASN,UAAU,oBACxBE,QAAS,kBAAMS,OAAOC,KClBJ,yCDiB1B,0BAKA,wBAAIZ,UAAU,QAAd,YACA,iGAGA,4BAAQM,KAAK,SAASN,UAAU,oBAAoBa,UAAQ,GAA5D,qCAGA,wBAAIb,UAAU,QAAd,YACA,+KEZOc,EAhBK,kBAChB,yBAAKd,UAAU,aACX,wBAAIA,UAAU,QAAd,WACA,yFAGA,8CACA,mCAGA,wBAAIA,UAAU,QAAd,iBACA,qCCUOe,E,2MAhBXC,OAAS,WACL,OACI,6BACI,kBAAC,EAAD,CAAcX,KAAM,EAAKY,MAAMZ,KAAMP,QAAS,EAAKmB,MAAMnB,UAEjC,SAApB,EAAKmB,MAAMZ,MAAmB,kBAAC,EAAD,MAGV,YAApB,EAAKY,MAAMZ,MAAsB,kBAAC,EAAD,Q,6BAVxBa,IAAMC,W,eCgCpBC,E,2MAhCXJ,OAAS,kBACL,6BACI,kBAAC,IAAD,CAAQK,SAAUC,mCACd,kBAAC,IAAD,CAAOC,KAAK,IACLC,OAAK,EACLR,OAAQ,WACJ,IAAIO,EAAOE,aAAaC,QAAQ,QAGhC,OAFAC,QAAQC,IAAIL,GACZI,QAAQC,IAAIN,mCACRC,GACAA,EAAOA,EAAKM,MAAM,IAAK,GAAG,GAC1BF,QAAQC,IAAIL,GACZE,aAAaK,WAAW,QACjB,kBAAC,IAAD,CAAUC,GAAI,IAAMR,KAEpB,kBAAC,IAAD,CAAUQ,GAAG,aAKnC,kBAAC,IAAD,CAAOR,KAAK,QACLC,OAAK,EACLR,OAAQ,SAACC,GAAD,OAAW,kBAAC,EAAD,iBAAoBA,EAApB,CAA2BZ,KAAM,aAE3D,kBAAC,IAAD,CAAOkB,KAAK,WACLC,OAAK,EACLR,OAAQ,SAACC,GAAD,OAAW,kBAAC,EAAD,iBAAoBA,EAApB,CAA2BZ,KAAM,mB,6BA3B5Ca,IAAMC,WCOtBa,MANf,WACE,OACI,kBAAC,EAAD,OCKcC,QACW,cAA7BtB,OAAOuB,SAASC,UAEe,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAASC,MACvB,2DCZNC,IAASrB,OAAO,kBAAC,EAAD,MAASsB,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.febec8ed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\n\nconst NavItem = ({selected, title, history, route}) =>\n    <li className={\"pm-hover nav-item \".concat(selected ? \"active\": \"\")}>\n        <a className=\"nav-link\" onClick={() => history.push(route)}>{title}</a>\n    </li>\n\nexport default NavItem;","import React from \"react\";\n\nimport \"./NavComponent.css\"\nimport NavItem from \"./NavItem\";\n\nconst NavComponent = ({page, history}) =>\n    <nav className=\"navbar navbar-expand-md static-top navbar-dark bg-primary\">\n        <div className=\"navbar-brand text-truncate pm-hover font-weight-bolder\"\n             onClick={() => history.push(\"/home\")}>\n            Programming Metal\n        </div>\n\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\"\n                data-target=\"#mainNavbar\">\n            <span className=\"navbar-toggler-icon\"/>\n        </button>\n\n        <div className=\"collapse navbar-collapse\" id=\"mainNavbar\">\n            <ul className=\"navbar-nav mr-auto\">\n                <NavItem selected={page === \"home\"}\n                         history={history}\n                         route=\"/home\"\n                         title=\"Home\"\n                />\n                <NavItem selected={page === \"pricing\"}\n                         history={history}\n                         route=\"/pricing\"\n                         title=\"Pricing\"\n                />\n            </ul>\n        </div>\n    </nav>\n\nexport default NavComponent;","import React from \"react\";\nimport {INTEREST_FORM_LINK} from \"../constants\";\n\nconst HomePage = () =>\n    <div className=\"container\">\n        <h1 className=\"pt-3\">Welcome to Programming Metal!</h1>\n        <p>\n            Do you feel overwhelmed by traditional big-tech computer science interviews?\n            Do you wish that you could practice in a low-stress environment where you can receive\n            honest feedback about your interview skills? Well, boy oh boy have you come to the right\n            place!\n        </p>\n        <br/>\n        <h2>Interested?</h2>\n        <p>\n            To schedule an interview, start by filling out the interest form below.\n        </p>\n        <button type=\"button\" className=\"btn btn-secondary\"\n                onClick={() => window.open(INTEREST_FORM_LINK)}>\n            I'd like to learn more\n        </button>\n\n        <h2 className=\"pt-4\">Book Now</h2>\n        <p>\n            If you are ready to schedule an appointment, click the link below.\n        </p>\n        <button type=\"button\" className=\"btn btn-secondary\" disabled>\n            Make an Appointment (coming soon)\n        </button>\n        <h2 className=\"pt-4\">About Us</h2>\n        <p>\n            Who are we? We are a group of computer scientists and engineers who have extensive experience\n            with big tech interviews. And we are pretty rad.\n        </p>\n    </div>\n\nexport default HomePage;","export const INTEREST_FORM_LINK = \"https://forms.gle/1xrDjGsdLYg8rdb37\";","import React from \"react\";\n\nconst PricingPage = () =>\n    <div className=\"container\">\n        <h1 className=\"pt-3\">Pricing</h1>\n        <p>\n            We do huge discounts, which we will maybe talk about here?\n        </p>\n        <h2>Mock Interview</h2>\n        <p>\n            TBD.\n        </p>\n        <h2 className=\"pt-3\">Resume Review</h2>\n        <p>\n            TBD.\n        </p>\n    </div>\n\nexport default PricingPage;","import React from \"react\";\nimport NavComponent from \"./NavComponent\";\nimport HomePage from \"./HomePage\";\nimport PricingPage from \"./PricingPage\";\n\nclass PagesComponent extends React.Component {\n\n    render = () => {\n        return (\n            <div>\n                <NavComponent page={this.props.page} history={this.props.history}/>\n                {\n                    this.props.page === \"home\" && <HomePage/>\n                }\n                {\n                    this.props.page === \"pricing\" && <PricingPage/>\n                }\n            </div>\n        )\n    }\n\n}\n\nexport default PagesComponent;","import React from \"react\";\nimport PagesComponent from \"../components/PagesComponent\";\nimport {BrowserRouter as Router, Route, Redirect} from 'react-router-dom';\n\nclass WebsiteContainer extends React.Component {\n    render = () =>\n        <div>\n            <Router basename={process.env.PUBLIC_URL}>\n                <Route path=\"/\"\n                       exact\n                       render={() => {\n                           let path = localStorage.getItem('path');\n                           console.log(path)\n                           console.log(process.env.PUBLIC_URL)\n                           if (path && process.env.PUBLIC_URL) {\n                               path = path.split('/', 1)[1];\n                               console.log(path)\n                               localStorage.removeItem('path');\n                               return <Redirect to={'/' + path}/>\n                           } else {\n                               return <Redirect to=\"/home\"/>\n                           }\n                       }}\n                />\n\n                <Route path=\"/home\"\n                       exact\n                       render={(props) => <PagesComponent {...props} page={\"home\"}/>}\n                />\n                <Route path=\"/pricing\"\n                       exact\n                       render={(props) => <PagesComponent {...props} page={\"pricing\"}/>}\n                />\n            </Router>\n        </div>\n}\n\nexport default WebsiteContainer;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport WebsiteContainer from \"./containers/WebsiteContainer\";\n\nfunction App() {\n  return (\n      <WebsiteContainer/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}